{"version":3,"sources":["ClipboardCopy.js","App.js","reportWebVitals.js","index.js"],"names":["ClipboardCopy","copyText","useState","isCopied","setIsCopied","text","a","navigator","clipboard","writeText","document","execCommand","className","type","value","readOnly","onClick","copyTextToClipboard","then","setTimeout","catch","err","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qOA2CiBA,MAxCjB,YAAsC,IAAbC,EAAY,EAAZA,SACrB,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KADiC,4CAIjC,WAAmCC,GAAnC,SAAAC,EAAA,2DACM,cAAeC,WADrB,gCAEiBA,UAAUC,UAAUC,UAAUJ,GAF/C,wEAIWK,SAASC,YAAY,QAAQ,EAAMN,IAJ9C,4CAJiC,sBA4BjC,OACE,sBAAKO,UAAU,OAAf,UACE,uBAAOC,KAAK,OAAOC,MAAOb,EAAUc,UAAQ,IAE5C,wBAAQC,QAnBY,YAbS,4CAe/BC,CAAoBhB,GACjBiB,MAAK,WAEJd,GAAY,GACZe,YAAW,WACTf,GAAY,KACX,QAEJgB,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAQd,SACE,+BAAOlB,EAAW,UAAY,WAEhC,sBAAMS,UAAU,KAAhB,SAAsBT,EAAW,mCAAiB,SC3B3CqB,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACC,cAAC,EAAD,CAAeX,SAAU,kCCMfwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAAS0B,eAAe,SAM1BX,M","file":"static/js/main.e1da0bcd.chunk.js","sourcesContent":["\r\nimport React , {useState} from 'react';\r\nimport './App.css';\r\nfunction ClipboardCopy({ copyText }) {\r\n    const [isCopied, setIsCopied] = useState(false);\r\n  \r\n    // This is the function we wrote earlier\r\n    async function copyTextToClipboard(text) {\r\n      if ('clipboard' in navigator) {\r\n        return await navigator.clipboard.writeText(text);\r\n      } else {\r\n        return document.execCommand('copy', true, text);\r\n      }\r\n    }\r\n  \r\n    // onClick handler function for the copy button\r\n    const handleCopyClick = () => {\r\n      // Asynchronously call copyTextToClipboard\r\n      copyTextToClipboard(copyText)\r\n        .then(() => {\r\n          // If successful, update the isCopied state value\r\n          setIsCopied(true);\r\n          setTimeout(() => {\r\n            setIsCopied(false);\r\n          }, 3000);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  \r\n    return (\r\n      <div className=\"main\">\r\n        <input type=\"text\" value={copyText} readOnly />\r\n        {/* Bind our handler function to the onClick button property */}\r\n        <button onClick={handleCopyClick}>\r\n          <span>{isCopied ? 'Copied!' : 'Copy'}</span>\r\n        </button>\r\n        <span className=\"pd\">{isCopied ? \"ðŸŽ‰PAISA DEðŸŽ‰\" : \"\"}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default ClipboardCopy;","\nimport ClipboardCopy from './ClipboardCopy';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <ClipboardCopy copyText={\"example@meghdoot.wb.bbs.in\"} ></ClipboardCopy>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}